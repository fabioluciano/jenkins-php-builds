<project name="${ant.project.name}" default="build">

  <property name="ROOT" value="${basedir}" />
  <property name="BUILD" value="${basedir}/build" />
  <property name="LOGS" value="${BUILD}/logs" />
  <property name="NAME" value="${ant.project.name}" />
  <property name="SOURCES_DIR" value="${ROOT}/app" />
  <property name="TESTS_DIR" value="${ROOT}/tests" />
  <property name="COMMA_JOINED" value="${SOURCES_DIR},${TESTS_DIR},database" />
  <property name="SPACE_JOINED" value="${SOURCES_DIR} ${TESTS_DIR} database" />

  <target name="build" depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,composer,phpunit,phpmetrics,phpdox" description=""/>

  <target name="build-parallel" depends="prepare,lint,tools-parallel,composer,phpunit,phpdox" description=""/>

  <target name="tools-parallel" description="Executa as tarefas em paralelo">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="phpcpd-ci"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc-ci"/>
    </parallel>
  </target>

  <echo message="NAME: ${NAME}" />
  <echo message="ROOT: ${ROOT}" />
  <echo message="BUILD: ${ROOT}" />
  <echo message="LOGS: ${LOGS}" />
  <echo message="SOURCES_DIR: ${SOURCES_DIR}" />
  <echo message="TESTS_DIR: ${TESTS_DIR}" />
  <echo message="COMMA_JOINED: ${COMMA_JOINED}" />
  <echo message="SPACE_JOINED: ${SPACE_JOINED}" />

  <target name="clean" unless="clean.done" description="Limpa os artefatos da contrução">
    <delete dir="${ROOT}/build/api"/>
    <delete dir="${ROOT}/build/coverage"/>
    <delete dir="${ROOT}/build/logs"/>
    <delete dir="${ROOT}/build/pdepend"/>
    <delete dir="${ROOT}/build/phpdox"/>
    <property name="clean.done" value="true"/>
  </target>

  <target name="prepare" unless="prepare.done" depends="clean" description="Prapara para a contrução">
    <mkdir dir="${ROOT}/build/api"/>
    <mkdir dir="${ROOT}/build/coverage"/>
    <mkdir dir="${ROOT}/build/logs"/>
    <mkdir dir="${ROOT}/build/pdepend"/>
    <mkdir dir="${ROOT}/build/phpdox"/>
    <property name="prepare.done" value="true"/>
  </target>

  <target name="composer" depends="composer-install,composer-update" description="Instala ou atualiza as dependencias do projeto" />

  <target name="composer.check">
    <condition property="composer.exist">
      <available file="${ROOT}/vendor" type="dir" />
    </condition>
  </target>

  <target name="composer-install" depends="composer.check" unless="composer.exist" description="Instala as dependências">
    <exec executable="composer" failonerror="true">
      <arg value="install" />
      <arg value="--no-progress" />
    </exec>
  </target>

  <target name="composer-update" depends="composer.check" if="composer.exist" description="Atualiza as dependências">
    <exec executable="composer" failonerror="true">
      <arg value="update" />
    </exec>
  </target>

  <target name="storage-permissions" depends="storage-permissions.unix" description="Definindo as permissões dos diretórios de storage" />

  <target name="storage.unix.check" description="Checa a existencia dos diretórios de storage">
    <condition property="storage.unix.exist">
      <and>
        <available file="${ROOT}/resources/app" type="dir"/>
        <available file="${ROOT}/resources/framework/cache" type="dir"/>
        <available file="${ROOT}/resources/framework/session" type="dir"/>
        <available file="${ROOT}/resources/framework/views" type="dir"/>
        <available file="${ROOT}/resources/logs" type="dir"/>
        <os family="unix" />
      </and>
    </condition>
  </target>

  <target name="storage-permissions.unix" depends="storage.unix.check" if="storage.unix.exist" description="Setting storage permissions on unix">
    <chmod file="${ROOT}/resources/app/**" perm="666" type="dir" failonerror="false"/>
    <chmod file="${ROOT}/resources/framework/**" perm="666" type="dir" failonerror="false"/>
    <chmod file="${ROOT}/resources/logs/**" perm="666" type="dir" failonerror="false"/>
  </target>

  <target name="lint" description="Realiza checagem de sintaxe dos códigos-fonte">
    <apply executable="php" failonerror="true">
      <arg value="-l" />
      <fileset dir="${SOURCES_DIR}">
        <include name="**/*.php" />
        <modified />
      </fileset>
      <fileset dir="${TESTS_DIR}">
        <include name="**/*.php" />
        <modified />
      </fileset>
      <fileset dir="${ROOT}/database">
        <include name="**/*.php" />
        <modified />
      </fileset>
    </apply>
  </target>

  <target name="phploc" unless="phploc.done" description="Mensura e imprime o tamanho do projeto utilizando o PHPLOC.">
    <exec executable="/usr/local/bin/phploc" taskname="phploc">
      <arg value="--count-tests"/>
      <arg value="${SOURCES_DIR}"/>
      <arg value="${TESTS_DIR}"/>
      <arg value="${ROOT}/database"/>
    </exec>
    <property name="phploc.done" value="true"/>
  </target>

  <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Mensura o tamanho do projeto utilizando o PHPLOC, o resultado é guardado em um CSV e um XML.">
    <exec executable="phploc" taskname="phploc">
      <arg value="--count-tests"/>
      <arg value="--log-csv"/>
      <arg path="${ROOT}/build/logs/phploc.csv"/>
      <arg value="--log-xml"/>
      <arg path="${ROOT}/build/logs/phploc.xml"/>
      <arg path="${SOURCES_DIR}"/>
      <arg path="${TESTS_DIR}"/>
      <arg path="${ROOT}/database"/>
    </exec>
    <property name="phploc.done" value="true"/>
  </target>

  <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calcula métricas do software utilizando o PHP_Depend. O resultado é guardado em um XML.">
    <exec executable="pdepend" taskname="pdepend">
      <arg value="--jdepend-xml=${ROOT}/build/logs/jdepend.xml"/>
      <arg value="--jdepend-chart=${ROOT}/build/pdepend/dependencies.svg"/>
      <arg value="--overview-pyramid=${ROOT}/build/pdepend/overview-pyramid.svg"/>
      <arg path="${COMMA_JOINED}"/>
    </exec>
    <property name="pdepend.done" value="true"/>
  </target>

  <target name="phpmd" unless="phpmd.done" description="Executa a detecção de problemas no projeto utilizando o PHPMD e os imprime.">
    <exec executable="phpmd" taskname="phpmd">
      <arg path="${COMMA_JOINED}"/>
      <arg value="text" />
      <arg value="codesize,unusedcode,naming,design" />
      <arg path="${ROOT}/build/phpmd.xml"/>
    </exec>
    <property name="phpmd.done" value="true"/>
  </target>

  <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Executa a detecção de problemas no projeto utilizando o PHPMD. O resultado é guardado em um XML.">
    <exec executable="phpmd" taskname="phpmd">
      <arg path="${COMMA_JOINED}"/>
      <arg value="xml"/>
      <arg value="codesize,unusedcode,naming,design" />
      <arg value="--reportfile"/>
      <arg path="${ROOT}/build/logs/pmd.xml"/>
    </exec>
    <property name="phpmd.done" value="true"/>
  </target>

  <target name="phpcs" unless="phpcs.done" description="Busca violações de padrões de código utilizando o PHP_CodeSniffer e os imprime.">
    <exec executable="phpcs" taskname="phpcs">
      <arg value="--standard=PSR1,PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${SOURCES_DIR}"/>
      <arg path="${TESTS_DIR}"/>
      <arg path="${ROOT}/database"/>
    </exec>
    <property name="phpcs.done" value="true"/>
  </target>

  <target name="phpcs-ci" unless="phpcs.done" depends="prepare" description="Busca violações de padrões de código utilizando o PHP_CodeSniffer. O resultado é guardado em um XML.">
    <exec executable="phpcs" output="/dev/null" taskname="phpcs">
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${ROOT}/build/logs/checkstyle.xml"/>
      <arg value="--standard=PSR1,PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${SOURCES_DIR}"/>
      <arg path="${TESTS_DIR}"/>
      <arg path="${ROOT}/database"/>
    </exec>
    <property name="phpcs.done" value="true"/>
  </target>

  <target name="phpcpd" unless="phpcpd.done" description="Busca códigos duplicados utilizando o PHPCPD e os imprime.">
    <exec executable="phpcpd" taskname="phpcpd">
      <arg path="${SOURCES_DIR}"/>
      <arg path="${TESTS_DIR}"/>
      <arg path="${ROOT}/database"/>
    </exec>
    <property name="phpcpd.done" value="true"/>
  </target>

  <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Busca códigos duplicados utilizando o PHPCPD. O resultado é guardado em um XML.">
    <exec executable="phpcpd" taskname="phpcpd">
      <arg value="--log-pmd"/>
      <arg path="${ROOT}/build/logs/pmd-cpd.xml"/>
      <arg path="${SOURCES_DIR}"/>
      <arg path="${TESTS_DIR}"/>
      <arg path="${ROOT}/database"/>
    </exec>
    <property name="phpcpd.done" value="true"/>
  </target>

  <target name="phpmetrics">
    <exec executable="phpmetrics" taskname="phpmetrics">
      <arg value="--report-xml"/>
      <arg path="${LOGS}/phpmetrics.xml" />
      <arg value="--report-html"/>
      <arg path="${LOGS}/phpmetrics.html" />
      <arg value="--report-html"/>
      <arg path="${LOGS}/phpmetrics.html" />
      <arg path="${SOURCES_DIR}" />
    </exec>
  </target>

  <target name="phpdox"
    unless="phpdox.done"
    depends="phploc-ci,phpcs-ci,phpmd-ci"
    description="Generate project documentation using phpDox">
    <exec executable="phpdox" dir="${ROOT}/build" taskname="phpdox"/>

    <property name="phpdox.done" value="true"/>
  </target>

  <target name="phpunit" depends="prepare" description="Executa testes unitários utilizando o PHP_Unit">
    <exec executable="phpunit" failonerror="false">
      <arg value="--configuration" />
      <arg value="${ROOT}/build/phpunit.xml" />
      <arg value="--coverage-html" />
      <arg value="${ROOT}/build/coverage" />
      <arg value="--coverage-clover" />
      <arg value="${LOGS}/clover.xml" />
      <arg value="--coverage-crap4j" />
      <arg value="${LOGS}/crap4j.xml" />
      <arg value="--log-junit" />
      <arg value="${LOGS}/junit.xml" />
    </exec>
    <property name="phpunit.done" value="true"/>
  </target>

</project>
